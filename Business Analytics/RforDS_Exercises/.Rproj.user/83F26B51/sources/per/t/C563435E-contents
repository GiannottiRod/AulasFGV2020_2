---
title: "Exercícios Cap 05"
author: "Rodrigo Giannotti"
output: pdf_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(fig.width=6 , fig.height=3) 
```
\setlength{\parindent}{4ex}

# Capitulo 05

## Inicialização

```{r, include = FALSE}
library(tidyverse)
library(magrittr) # mais pipes, como %<>%
library(lubridate) # melhor manejo de datas
options(tibble.print_max = 5)
```

```{r, eval = FALSE}
library(tidyverse)
library(magrittr) # mais pipes, como %<>%
library(lubridate) # melhor manejo de datas
```

Para o capitulo 5 também utilizaremos a biblioteca de voos de NYC
```{r}
library(nycflights13)
# ?flights
# View(flights)
head (flights)
```

\newpage

## Exercícios

## 5.2 filter()

### 5.2.1 
Find all flights that:

#### a 
Had an arrival delay of two or more hours

```{r}
flights %>% filter(
  arr_delay >= 120
  )
```

\newpage

#### b
Flew to Houston (IAH or HOU) 

```{r}
flights %>% filter(
  dest %in% c("IAH","HOU")
  )
```

\newpage

#### c
Were operated by United, American or Delta

```{r}
flights %>% filter(
  carrier %in% c("UA", "AA", "DL")
  )
```

\newpage

#### d
Departed in the summer (July, August and September)

```{r}
summer <- c(7:9)
flights %>% filter(
  month %in% summer
  )
```

\newpage

#### e
Arrived more than two hours late, but didn't leave late

```{r}
flights %>% filter(
  arr_delay >= 120 & dep_delay <= 0
  )
```

\newpage

#### f
Were delayed by at least an hour, but made up over 30 minutes in flight 

```{r}
flights %>% filter(
  dep_delay >= 60 & (dep_delay - arr_delay) >= 30
  )
```

\newpage

#### g
Departed between 00:00 and 6:00 (inclusive)

```{r}
flights %>%  filter( 
  dep_time <= 600 | dep_time == 2400
  )
```

\newpage

### 5.2.2 
Another useful dplyr filtering helper is between(). What does it
do? Can you use it to simplify the code needed to answer the
previous challenges?

```{r}
# ?between
```
\par
Como dito na ajuda, "This is a shortcut for x >= left & x <= right" ou seja, é uma maneira de testar se valores dentro de um vetor estão dentro de dois limites. \par
Isso só seria útil para simplificar a questão dos meses do verão

```{r}
flights %>% filter(
  between(month, 7, 9)
  )
   
```

\newpage

### 5.2.3 
How many flights have a missing dep_time? What other variables are missing? What might these rows represent?

```{r}
flights %>% filter(
  is.na(dep_time)
  )
   
```
\par
Podemos ver que os voos com dep_time vazio apresentam outras colunas vazias, como dep_delay; arr_time; arr_delay; e air_time
\par
Isso muito provavelmente indica voos que foram cancelados

\newpage

### 5.2.4 
Why is NA ^ 0 not missing? Why is NA | TRUE not missing?
Why is FALSE & NA not missing? Can you figure out the general
rule? (NA * 0 is a tricky counterexample!)
```{r}
# help(`^`)
# help(`|`)
```

Como podemos ver no texto de ajuda "1 ^ y and y ^ 0 are 1, always.", dessa forma o operador nem passa pela etapa de avaliar o NA, simplesmente retornando o resultado. \par
Similarmente, "NA is a valid logical object. Where a component of x or y is NA, the result will be NA if the outcome is ambiguous. In other words NA & TRUE evaluates to NA, but NA & FALSE evaluates to FALSE. See the examples below." \par
Logo como sempre (x | TRUE) retornaria TRUE e (x & FALSE) retornaria FALSE independentemente dos valores de x, logo retornam-se os valores lógicos. \par
Isso só ocorre quando o computador está explicitamente tomando a decisão de não avaliar a expressão como um todo, devido à um de seus lados. não existe tão decisão para NA * 0, por exemplo, logo o resultado esperado é NA.

```{r}
NA * 0
```

\newpage

## 5.3 arrange()

### 5.3.1 
How could you use arrange() to sort all missing values to the
start? (Hint: use is.na().)

```{r}
flights %>% arrange(
  desc(
    is.na(dep_time)
  ))
   
```

\newpage

### 5.3.2 
Sort flights to find the most delayed flights. Find the flights
that left earliest.

```{r}
flights %>% arrange(
  desc(
    (dep_delay + arr_delay)
  ))  # maior atraso somado entre saída e chegada

flights %>% arrange(
  dep_delay
  )   # menor atraso de saída
```

\newpage

### 5.3.3 
Sort flights to find the fastest (highest speed) flights.

```{r}
flights %>% arrange(
  desc(
    distance / air_time
  )
)
   
```

\newpage

### 5.3.4 
Which flights traveled the longest? Which traveled the shortest?

```{r}
flights %>% arrange(
  desc(
    distance
  ))    # voos mais longos

flights %>% arrange(
  distance
  )    # voos mais curtos
```

\newpage

## 5.4 select()

### 5.4.1
Brainstorm as many ways as possible to select dep_time,
dep_delay, arr_time, and arr_delay from flights.

Por mais que uma partida de regex golf sempre tenha seu valor nostalgico a função starts_with() resolve o problema com mais simplicidade
```{r}
flights %>% select(
  starts_with("dep_"
  ) | 
  starts_with("arr_"
  )
)
```

\newpage

### 5.4.2
What happens if you include the name of a variable multiple
times in a select() call?

```{r}
flights %>% select(
  dep_time, dep_time, dep_time, arr_time, dep_time
)
```

Somente uma copia dessa coluna chega ao resultado final

\newpage

### 5.4.3
What does the one_of() function do? Why might it be helpful
in conjunction with this vector?
```{r}
vars <- c(
 "year", "month", "day", "dep_delay", "arr_delay"
)
```

```{r}
# ?tidyselect::one_of
```
Como podemos ver o próprio tidyverse sugere o uso das mais precisas all_of()
ou any_off(), que servem para - em conjunto com o comando select() selecionar variáveis com nomes dentro de listas. o comando all_of retorna erro se algum dos nomes da lista não for encontrado como nome de coluna enquanto o any_off ignora as colunas que não forem encontradas. No caso ambos devem retornar o mesmo dataframe, visto que todas as colunas da lista existem.

```{r}
flights %>% select(
  any_of(
    vars
  )
)
```

\newpage

### 5.4.4 
Does the result of running the following code surprise you?
How do the select helpers deal with case by default? How can
you change that default?

```{r}
select(flights, contains("TIME"))
# ?select
```

Isso não surpreende, mas poderia ser interessante esperar que o helper "contains()" considerasse caixa baiza ou alta. Para mudar seu comportamento para que passe a considerar isso basta usar o argumento ignore.case = FALSE

```{r}
flights %>% select(
  contains(
    "TIME", ignore.case = F
  )
)
```

\newpage

## 5.5 mutate()

### 5.5.1
Currently dep_time and sched_dep_time are convenient to look at, but hard to compute with because they’re not really continuous numbers. Convert them to a more convenient representation of number of minutes since midnight.

```{r}
(flights2 <- flights %>% mutate(
  dep_time_mins = (dep_time %/% 100) * 60 + dep_time %% 100,
  sched_dep_time_mins = (sched_dep_time %/% 100) * 60 + sched_dep_time %% 100
))
```

\newpage

### 5.5.2
Compare air_time with arr_time - dep_time. What do you expect to see? What do you see? What do you need to do to fix it?
\par
Primeiro vamos dar o mesmo tratamento que demos para os horários de saída para os horários de chegada

```{r}
flights2 %<>% mutate(
  sched_arr_time_mins = (sched_arr_time %/% 100) * 60 + sched_arr_time %% 100,
  arr_time_mins = (arr_time %/% 100) * 60 + arr_time %% 100
)
```
\par
Com isso vamos criar uma nova coluna, que compara o horário efetivo de saída com o de chegada, tomando alguns cuidados, especialmente com voos que saem em uma data e chegam em outra. Supoe-se que nenhum voo voa por mais de 24h nesse caso (e uma rápida olhada para a coluna air_time confirma isso)

```{r}
flights2 %<>% mutate(
  arr_dep_time_diff = ifelse(
    arr_time_mins >= dep_time_mins, # se o voo chegou no dia seguinte a conta arr_time - dep_time daria negativa, o que seria um absurdo.
    arr_time_mins - dep_time_mins, # caso não hajam problemas
    arr_time_mins - dep_time_mins + 24*60) # adicionando o numero de minutos em um dia caso o voo tenha mudado de dia no ar
  )
```
\par
Agora vamos comparar a diferença entre horário de saída com a coluna air_time

```{r, fig.height= 5, fig.width = 5}
flights2 %>% 
  na.omit() %>% 
  mutate(
  comparacao =
    air_time - arr_dep_time_diff
) %>% 
  select(comparacao) %>% 
  boxplot()

flights2 %>% 
  na.omit() %>% 
  mutate(
  comparacao =
    air_time - arr_dep_time_diff
) %>% 
  select(comparacao) %>%
  summary()
```
\par
Esperaria-se que essa comparação fosse sempre igual a 0, visto que se espera que o tempo de voo se iguale à diferença de hora de saída e hora de chegada, o problema é que neste caso estamos ignorando o tempo de taxi e que existam imperfeições de registro.
(poderiamos ter questoes de fuso horario, mas ?flights nos informa que todos os horarios estão na timezone de NYC)

\newpage

### 5.5.3
Compare dep_time, sched_dep_time, and dep_delay. How would you expect those three numbers to be related?

```{r}
flights2 %>% mutate(
  comparison = ifelse(
    dep_time_mins >= (sched_dep_time_mins + dep_delay),
    dep_time_mins - (sched_dep_time_mins + dep_delay),
    dep_time_mins - (sched_dep_time_mins + dep_delay) + 24*60
    )) %>% 
  select(comparison) %>%
  summary()
```

Esperaria-se que essa comparação retornasse valor nulo, o que confirmamos com o comando summary()

\newpage

### 5.5.4
Find the 10 most delayed flights using a ranking function. How do you want to handle ties? Carefully read the documentation for min_rank().

```{r}
flights %>% 
  mutate(
  rank_delay = min_rank( desc(
      arr_delay + dep_delay
))) %>% 
  arrange(rank_delay) %>% 
  filter(rank_delay <= 10)
# ?rank
```

Por sorte não temos empates usando essa formula, mas se tivessemos por usar a forma min_rank teriamos que empates teriam o mesmo rank, este sendo o minimo entre eles.

\newpage

### 5.5.5
What does 1:3 + 1:10 return? Why?

```{r}
1:3 + 1:10
```
a lógica é 
1+1
2+2
3+3
e então, como a lista menor acaba temos
1+4
2+5
3+6
1+7
2+8
3+9
1+10
E um aviso informando que a lista maior não tem uma quantidade de itens multipla da quantidade de itens na lista menor.

\newpage

### 5.5.6
What trigonometric functions does R provide?

```{r}
# ?sin
```

O texto de ajuda das funções trigonometricas lista as seguintes:
"These functions give the obvious trigonometric functions. They respectively compute the cosine, sine, tangent, arc-cosine, arc-sine, arc-tangent, and the two-argument arc-tangent.

\newpage

## 5.6 summarise()

\par
Para essa seção em alguns exercícios utilizaremos uma tabela com os voos que foram  cancelados.

```{r}
not_cancelled <- flights %>% 
  filter(!is.na(dep_delay), !is.na(arr_delay))
```

### 5.6.1 
Brainstorm at least 5 different ways to assess the typical delay characteristics of a group of flights. Consider the following scenarios:

#### a
A flight is 15 minutes early 50% of the time, and 15 minutes late 50% of the time.

#### b
A flight is always 10 minutes late.

#### c
A flight is 30 minutes early 50% of the time, and 30 minutes late 50% of the time.

#### d
99% of the time a flight is on time. 1% of the time it’s 2 hours late.

#### e
Which is more important: arrival delay or departure delay?

### 5.6.2
Come up with another approach that will give you the same output as not_cancelled %>% count(dest) and not_cancelled %>% count(tailnum, wt = distance) (without using count()).

```{r, warning=FALSE}
identical(
  not_cancelled %>% count(dest),
  not_cancelled %>% 
    group_by(dest) %>% 
    summarise(n = n(), .groups = 'drop')
)

identical(
  not_cancelled %>% count(tailnum, wt = distance),
  not_cancelled %>%
    group_by(tailnum) %>% 
    summarise(n = sum(distance), .groups = 'drop')
)
```

\newpage

### 5.6.3
Our definition of cancelled flights (is.na(dep_delay) | is.na(arr_delay) ) is slightly suboptimal. Why? Which is the most important column?
\par
Primeiro, vamos olhar para a coluna com a maior quantidade de NAs
```{r}
flights %>% filter(is.na(arr_delay))
```
\par
Encontramos alguns voos com horário de saída, horário de chegada, mas nem tempo de voo nem atraso de chegada. \par
É difícil saber como considerar se estes voos foram ou não cancelados, mas me parece que o mais correto seria considerar um voo cancelado como aquele que não decolou, e portanto, tem dep_time == NA

\newpage

### 5.6.4
Look at the number of cancelled flights per day. Is there a pattern? Is the proportion of cancelled flights related to the average delay?

\par É de se imaginar que se existe algum padrão de cancelamentos ou atrasos estes se dariam em datas especiais ou em dias da semana mais comuns. Para isso usando a coluna time_hour e o pacote lubridate podemos criar colunas para ter mais insights sobre esses padrões.
```{r}
flights3 <- flights %>% 
  mutate(dia_semana = lubridate::wday(time_hour))

flights3 %>% 
  group_by(dia_semana) %>% 
  summarise(soma_cancelados = sum(is.na(dep_time)), .groups = "drop") %>% 
  ggplot(mapping = aes(x = dia_semana, y = soma_cancelados)) +
  geom_col(fill = "lightblue") # voos cancelados por dia da semana
```
\par
Primeiro podemos ver que muito menos voos foram cancelados durante o fim de semana, mas será que existe uma correlação com o número total de voos nesses dias?

```{r}
flights3 %>% 
  group_by(dia_semana) %>% 
  summarise(n_voos = n(), .groups = "drop") %>% 
  ggplot(mapping = aes(x = dia_semana, y = n_voos)) +
  geom_col(fill = "lightblue") # voos totais por dia da semana
```
\par
Por mais que realmente existam menos voos marcados durante fins de semana parece que muitos mais são cancelados durante a semana do que em fins de semana.

\newpage

### 5.6.5
Which carrier has the worst delays? Challenge: can you disentangle the effects of bad airports vs. bad carriers? Why/why not? (Hint: think about flights %>% group_by(carrier, dest) %>% summarise(n()))
\par
Para essa Análise me parece o mais razoável analizar somente o arr_delay, visto que por mais chato que seja ficar aguardando no aeroporto no final o que mais importa é se o avião chega ao seu destino final no horário, para os passageiros.
```{r, fig.height= 6}
not_cancelled %>% 
  group_by(carrier) %>% 
  summarise(sum_delays = sum(arr_delay), .groups = 'drop') %>% 
  ggplot(mapping = aes(x = reorder(carrier, X = sum_delays), y = sum_delays, fill = sum_delays)) +
  geom_col() +
  coord_flip() +
  scale_fill_gradient(low="green", high="red") + 
  xlab("Carrier Code") + 
  ggtitle("Atrasos por companhia, soma")
```
\par
Por mais bonito que o gráfico possa ficar o mais justo seria considerar o atraso médio, não o total de atrasos no período (ou ainda vale pensar qual a medida estatística mais adequada, por exemplo uma medida mais robusta poderia ser mais interessante para o passageiro médio). \par
Feitas essas considerações seguimos com o exercício.

```{r}
not_cancelled %>% 
  group_by(origin) %>% 
  summarise(sum_delays = sum(arr_delay), .groups = 'drop') %>% 
  ggplot(mapping = aes(x = reorder(origin, X = sum_delays), y = sum_delays, fill = sum_delays)) +
  geom_col() +
  coord_flip() +
  scale_fill_gradient(low="green", high="red") + 
  xlab("Aeroporto saída") + 
  ggtitle("Atrasos por aeroporto, soma")
```
\par
É bastante evidente que as companhias que mais voam de EWR inevitavelmente incorrerão em mais atrasos na média. \par
Poderiamos tentar um score que ponderasse o atraso médio dos aeroportos na avaliação das companhias aéreas, mas ainda assim é possível argumentar que as responsáveis pelos atrasos nos aeroportos sejam as companhias que lá mais operam.

\newpage

### 5.6.6
What does the sort argument to count() do. When might you use it?

```{r}
# ?count
```
\par
O arguimento sort, se == TRUE fará com que na saída da função count() os maiores grupos estarão no topo, ordenados.

\newpage

## 5.7 grouped mutates (and filters)

### 5.7.1
Refer back to the lists of useful mutate and filtering functions. Describe how each operation changes when you combine it with grouping.

### 5.7.2
Which plane (tailnum) has the worst on-time record?

### 5.7.3
What time of day should you fly if you want to avoid delays as much as possible?

### 5.7.4
For each destination, compute the total minutes of delay. For each flight, compute the proportion of the total delay for its destination.

### 5.7.5
Delays are typically temporally correlated: even once the problem that caused the initial delay has been resolved, later flights are delayed to allow earlier flights to leave. Using lag(), explore how the delay of a flight is related to the delay of the immediately preceding flight.

### 5.7.6
Look at each destination. Can you find flights that are suspiciously fast? (i.e. flights that represent a potential data entry error). Compute the air time of a flight relative to the shortest flight to that destination. Which flights were most delayed in the air?

### 5.7.7
Find all destinations that are flown by at least two carriers. Use that information to rank the carriers.

### 5.7.8
For each plane, count the number of flights before the first delay of greater than 1 hour.